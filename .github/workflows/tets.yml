name: C/C++ CI with Coverage

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libgtest-dev gcovr

    - name: Build GoogleTest
      run: |
        cd /usr/src/googletest
        sudo cmake .
        sudo make
        sudo cp -v *.a /usr/lib || true

    - name: Compile tests with coverage
      run: |
        g++ -std=c++17 -I. --coverage -fprofile-arcs -ftest-coverage \
            -pthread -lgtest -lgtest_main \
            test_fun.cpp -o tests

    - name: Run tests
      run: |
        ./tests

    - name: Generate coverage report
      run: |
        gcovr --xml cover.xml --print-summary .
        # Извлекаем процент покрытия
        COVERAGE_PCT=$(gcovr --xml | grep -oP 'line-rate="\K[0-9.]+' | head -1)
        COVERAGE_PERCENT=$(echo "scale=0; $COVERAGE_PCT * 100 / 1" | bc)
        echo "COVERAGE=${COVERAGE_PERCENT}%" >> $GITHUB_ENV
        
        # Определяем цвет
        if [ $COVERAGE_PERCENT -ge 90 ]; then
            echo "COLOR=brightgreen" >> $GITHUB_ENV
        elif [ $COVERAGE_PERCENT -ge 70 ]; then
            echo "COLOR=green" >> $GITHUB_ENV
        elif [ $COVERAGE_PERCENT -ge 50 ]; then
            echo "COLOR=yellowgreen" >> $GITHUB_ENV
        elif [ $COVERAGE_PERCENT -ge 30 ]; then
            echo "COLOR=yellow" >> $GITHUB_ENV
        elif [ $COVERAGE_PERCENT -ge 10 ]; then
            echo "COLOR=orange" >> $GITHUB_ENV
        else
            echo "COLOR=red" >> $GITHUB_ENV
        fi

    - name: Update Gist with coverage data
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ secrets.GIST_SECRET }}
        gistID: '0c003749b19fd7227ff75c6d31ad37e5'
        filename: 'cover.json'
        label: 'Code Coverage'
        message: ${{ env.COVERAGE }}
        color: ${{ env.COLOR }}

    - name: Generate coverage summary
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: cover.xml
        badge: true
        fail_below_min: false
        format: markdown
        output: both
        thresholds: '60 80'

    - name: Display coverage results
      run: |
        echo "Coverage: ${{ env.COVERAGE }}"
        echo "Color: ${{ env.COLOR }}"
        cat code-coverage-results.md
